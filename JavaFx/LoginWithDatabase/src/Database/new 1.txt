package sample;

import Database.DbConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import sample.Hospital;

import java.net.URL;
import java.util.ResourceBundle;

public class Controller implements Initializable {

    @FXML
    private TextField txtname;

    @FXML
    private TextField txtaddress;

    @FXML
    private TextField txticu;

    @FXML
    private TextField txtoxygen;

    @FXML
    private TextField txtcontact;

    @FXML
    private Button btnadd;

    @FXML
    private TextField txtsearch;

    @FXML
    private Label lblSearch;

    @FXML
    private TableView<Hospital> tableInfo;

    @FXML
    private TableColumn<Hospital, String> col_name;

    @FXML
    private TableColumn<Hospital, String> col_address;

    @FXML
    private TableColumn<Hospital, String> col_icu;

    @FXML
    private TableColumn<Hospital, String> col_oxygen;

    @FXML
    private TableColumn<Hospital, String> col_contact;


    static ObservableList<Hospital> dataList = FXCollections.observableArrayList();

    @FXML
    void clicktoAdd(MouseEvent event) {
        String Name = txtname.getText();
        String Address = txtaddress.getText();
        String ICU = txticu.getText();
        String Oxygen_capacity = txtoxygen.getText();
        String Contact = txtcontact.getText();

        Hospital h1 = new Hospital(Name, Address, ICU, Oxygen_capacity, Contact);

        dataList.addAll(h1); // adding to observable list
        System.out.println("All info added successfully!!");
        DbConnection.insert(Name, Address, ICU, Oxygen_capacity, Contact); // adding to database

        txtname.clear();
        txtaddress.clear();
        txticu.clear();
        txtoxygen.clear();
        txtcontact.clear();

        col_name.setCellValueFactory(new PropertyValueFactory<Hospital, String>("name"));
        col_address.setCellValueFactory(new PropertyValueFactory<Hospital, String>("address"));
        col_icu.setCellValueFactory(new PropertyValueFactory<Hospital, String>("icu"));
        col_oxygen.setCellValueFactory(new PropertyValueFactory<Hospital, String>("oxygen"));
        col_contact.setCellValueFactory(new PropertyValueFactory<Hospital, String>("contact"));

        tableInfo.setItems(dataList); // adding to tableview

    }


    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

        FilteredList<Hospital> filteredData = new FilteredList<>(dataList, b -> true);

        // 2. Set the filter Predicate whenever the filter changes.
        txtsearch.textProperty().addListener((observable, oldValue, newValue) -> {
            filteredData.setPredicate(hospital -> {
                // If filter text is empty, display all persons.

                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }

                // Compare first name and last name of every person with filter text.
                String lowerCaseFilter = newValue.toLowerCase();

                if (hospital.getName().toLowerCase().contains(lowerCaseFilter)) {
                    return true; // Filter matches first name.
                } else if (hospital.getAddress().toLowerCase().contains(lowerCaseFilter)) {
                    return true; // Filter matches last name.
                }

                else if (String.valueOf(hospital.getIcu()).contains(lowerCaseFilter)) {
                    return true;
                }

                else if (hospital.getOxygen().toLowerCase().contains(lowerCaseFilter)) {
                    return true; // Filter matches last name.
                }

                else if (hospital.getContact().toLowerCase().contains(lowerCaseFilter)) {
                    return true; // Filter matches last name.
                }
                else
                    return false; // Does not match.
            });
        });

        // 3. Wrap the FilteredList in a SortedList.
        SortedList<Hospital> sortedData = new SortedList<>(filteredData);

        // 4. Bind the SortedList comparator to the TableView comparator.
        // 	  Otherwise, sorting the TableView would have no effect.
        sortedData.comparatorProperty().bind(tableInfo.comparatorProperty());

        // 5. Add sorted (and filtered) data to the table.
        tableInfo.setItems(sortedData);

    }
}



public class tableController implements Initializable {

    @FXML
    private TableView<Hospital> tableInfo;

    @FXML
    private TableColumn<Hospital, String> col_name;

    @FXML
    private TableColumn<Hospital, String> col_address;

    @FXML
    private TableColumn<Hospital, String> col_icu;

    @FXML
    private TableColumn<Hospital, String> col_oxygen;

    @FXML
    private TableColumn<Hospital, String> col_contact;


    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

        Hospital[] hp;

        try {
            ObjectInputStream is = new ObjectInputStream(new FileInputStream("hospital.bin"));
            hp = (Hospital[]) is.readObject();
            is.close();

            for(Hospital x: hp){
                Hospital hosp = new Hospital(x.getName(), x.getAddress(), x.getICU(), x.getOxygen(), x.getContact());
                formController.dataList.add(hosp);
            }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }


        col_name.setCellValueFactory(new PropertyValueFactory<Hospital, String>("name"));
        col_address.setCellValueFactory(new PropertyValueFactory<Hospital, String>("address"));
        col_icu.setCellValueFactory(new PropertyValueFactory<Hospital, String>("icu"));
        col_oxygen.setCellValueFactory(new PropertyValueFactory<Hospital, String>("oxygen"));
        col_contact.setCellValueFactory(new PropertyValueFactory<Hospital, String>("contact"));

        tableInfo.setItems(formController.dataList); // adding to tableview

    }
}
